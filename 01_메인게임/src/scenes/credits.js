import creditText from "../content/creditText.js";
import { gameState } from "../state/stateManagers.js";
import { colorizeBackground } from "../utils.js";

export default function credits(k) {
    colorizeBackground(k, 20, 20, 40); // Ïñ¥ÎëêÏö¥ Î∞∞Í≤Ω

    // HTML ÌÅ¨Î†àÎîß Ïª®ÌÖåÏù¥ÎÑà ÏÉùÏÑ±
    const creditsContainer = document.createElement("div");
    creditsContainer.style.position = "fixed";
    creditsContainer.style.top = "0";
    creditsContainer.style.left = "0";
    creditsContainer.style.width = "100%";
    creditsContainer.style.height = "100%";
    creditsContainer.style.backgroundColor = "rgba(20, 20, 40, 0.95)";
    creditsContainer.style.color = "white";
    creditsContainer.style.fontFamily = "gameboy, monospace";
    creditsContainer.style.fontSize = "43px";
    creditsContainer.style.textAlign = "center";
    creditsContainer.style.zIndex = "1000";
    creditsContainer.style.overflow = "hidden";
    creditsContainer.style.display = "flex";
    creditsContainer.style.flexDirection = "column";
    creditsContainer.style.justifyContent = "center";
    creditsContainer.style.alignItems = "center";

    // ÌÅ¨Î†àÎîß ÌÖçÏä§Ìä∏ Ïª®ÌÖåÏù¥ÎÑà
    const textContainer = document.createElement("div");
    textContainer.style.animation = "scrollUp 17.6s linear infinite";
    textContainer.style.whiteSpace = "pre-line";
    textContainer.style.lineHeight = "1.8";
    textContainer.style.position = "absolute";
    textContainer.style.top = "100vh";
    textContainer.style.width = "100%";

    // CSS Ïï†ÎãàÎ©îÏù¥ÏÖòÍ≥º ÏõπÌè∞Ìä∏ Ï†ïÏùò
    const style = document.createElement("style");
    style.textContent = `
        @font-face {
            font-family: 'gameboy';
            src: url('./assets/fonts/gb.ttf') format('truetype');
            font-weight: normal;
            font-style: normal;
        }
        
        @keyframes scrollUp {
            0% { 
                transform: translateY(0);
            }
            100% { 
                transform: translateY(-200vh);
            }
        }
    `;
    document.head.appendChild(style);

    // Îπà Î¨∏ÏûêÏó¥ÏùÑ Ï†úÍ±∞ÌïòÍ≥† Ïú†Ìö®Ìïú ÌÖçÏä§Ìä∏Îßå ÏÇ¨Ïö©
    const validCredits = creditText.english.filter(
        (line) => line && line.trim() !== ""
    );

    // ÌÅ¨Î†àÎîß ÌÖçÏä§Ìä∏ ÏÉùÏÑ±
    let creditText_html = "";
    let previousWasSectionTitle = false;

    validCredits.forEach((line) => {
        const isSectionTitle = [
            "Project Lead",
            "Planning",
            "Tech Lead & Game Level Design",
            "Art Lead",
            "Music & Sound",
            "Story & Planning",
            "Special Thanks",
            "Tools Used",
            "Libraries & Assets",
            "Thank you for playing!",
        ].includes(line);

        if (
            isSectionTitle &&
            previousWasSectionTitle === false &&
            creditText_html !== ""
        ) {
            creditText_html += `<div style="height: 40px;"></div>`;
        }

        if (line === "After School RPG") {
            creditText_html += `<div style="font-size: 86px; margin: 20px 0; font-weight: bold;">${line}</div>`;
        } else if (line === "Gong Dong Chae Presents") {
            creditText_html += `<div style="font-size: 58px; margin: 20px 0; color: #ffc0cb;">${line}</div>`;
        } else if (isSectionTitle) {
            creditText_html += `<div style="font-size: 50px; margin: 15px 0; color: #ffc0cb; font-weight: bold;">${line}</div>`;
        } else {
            creditText_html += `<div style="font-size: 43px; margin: 10px 0;">${line}</div>`;
        }

        previousWasSectionTitle = isSectionTitle;
    });

    textContainer.innerHTML = creditText_html;
    creditsContainer.appendChild(textContainer);

    // ÌïòÎã® ÏïàÎÇ¥ ÌÖçÏä§Ìä∏
    const instructionDiv = document.createElement("div");
    instructionDiv.style.position = "absolute";
    instructionDiv.style.bottom = "30px";
    instructionDiv.style.width = "100%";
    instructionDiv.style.fontSize = "29px";
    instructionDiv.style.color = "#999";
    instructionDiv.style.fontFamily = "gameboy, monospace";
    instructionDiv.textContent = "Press SPACE to return";
    creditsContainer.appendChild(instructionDiv);

    // DOMÏóê Ï∂îÍ∞Ä
    document.body.appendChild(creditsContainer);

    // Ï†ïÎ¶¨ Ìï®Ïàò
    function cleanup() {
        if (creditsContainer && creditsContainer.parentNode) {
            creditsContainer.parentNode.removeChild(creditsContainer);
        }
        if (style && style.parentNode) {
            style.parentNode.removeChild(style);
        }
    }

    // Ïù¥Ï†Ñ Ïî¨ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ (ÌòÑÏû¨ Ïî¨Ïù¥ 'current'Ïù∏ Í≤ΩÏö∞ titleÎ°ú Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï)
    let previousScene = gameState.getPreviousScene() || "title";
    if (previousScene === "current" || previousScene === "credits") {
        previousScene = "title";
    }
    console.log(`[DEBUG] Credits - Ïù¥Ï†Ñ Ïî¨: ${previousScene}`);

    // 17.6Ï¥à ÌõÑ ÏûêÎèôÏúºÎ°ú Ïù¥Ï†Ñ Ïî¨ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
    const autoReturnTimer = setTimeout(() => {
        cleanup();
        k.go(previousScene);
    }, 17600);

    // Ïä§ÌéòÏù¥Ïä§Î∞îÎ°ú Ïñ∏Ï†úÎì† Ïù¥Ï†Ñ Ïî¨ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
    const spaceHandler = () => {
        console.log(`[DEBUG] Ïä§ÌéòÏù¥Ïä§ ÌÇ§ ÎàåÎ¶º - CreditsÏóêÏÑú ${previousScene}Î°ú ÎèåÏïÑÍ∞ê`);
        clearTimeout(autoReturnTimer);
        cleanup();
        k.go(previousScene);
    };
    
    k.onKeyPress("space", spaceHandler);
    
    // ESC ÌÇ§Î°úÎèÑ ÎèåÏïÑÍ∞ÄÍ∏∞
    k.onKeyPress("escape", () => {
        console.log(`[DEBUG] ESC ÌÇ§ ÎàåÎ¶º - CreditsÏóêÏÑú ${previousScene}Î°ú ÎèåÏïÑÍ∞ê`);
        clearTimeout(autoReturnTimer);
        cleanup();
        k.go(previousScene);
    });
    
    // ENTER ÌÇ§Î°úÎèÑ ÎèåÏïÑÍ∞ÄÍ∏∞
    k.onKeyPress("enter", () => {
        console.log(`[DEBUG] ENTER ÌÇ§ ÎàåÎ¶º - CreditsÏóêÏÑú ${previousScene}Î°ú ÎèåÏïÑÍ∞ê`);
        clearTimeout(autoReturnTimer);
        cleanup();
        k.go(previousScene);
    });
    
    // Î∏åÎùºÏö∞Ï†Ä Î†àÎ≤® ÌÇ§ Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨ (ÌïúÍ∏Ä ÌÇ§ Î¨∏Ï†ú Ìï¥Í≤∞Ïö©)
    let documentKeyHandler = (e) => {
        console.log(`[DEBUG] Credits Î∏åÎùºÏö∞Ï†Ä ÌÇ§ Ïù¥Î≤§Ìä∏: ${e.code}, ${e.key}`);
        
        if (e.type === 'keydown') {
            // Ïä§ÌéòÏù¥Ïä§, ESC, ÏóîÌÑ∞ ÌÇ§ Ï≤òÎ¶¨
            if (e.code === 'Space' || e.code === 'Escape' || e.code === 'Enter') {
                e.preventDefault();
                console.log(`[DEBUG] ${e.code} ÌÇ§Î°ú Credits Ï¢ÖÎ£å`);
                clearTimeout(autoReturnTimer);
                cleanup();
                // ÌÇ§ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†úÍ±∞
                document.removeEventListener('keydown', documentKeyHandler);
                k.go(previousScene);
            }
        }
    };
    
    // Î∏åÎùºÏö∞Ï†Ä Î†àÎ≤® ÌÇ§ Ïù¥Î≤§Ìä∏ Îì±Î°ù
    document.addEventListener('keydown', documentKeyHandler);

    // Í≤åÏûÑÌå®ÎìúÎ°úÎèÑ Ïù¥Ï†Ñ Ïî¨ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
    k.onGamepadButtonPress("east", () => {
        // AÎ≤ÑÌäº
        clearTimeout(autoReturnTimer);
        cleanup();
        k.go(previousScene);
    });

    k.onGamepadButtonPress("south", () => {
        // BÎ≤ÑÌäº
        clearTimeout(autoReturnTimer);
        cleanup();
        k.go(previousScene);
    });

    k.onGamepadButtonPress("start", () => {
        clearTimeout(autoReturnTimer);
        cleanup();
        k.go(previousScene);
    });
    
    // Ïî¨ Ï¢ÖÎ£å Ïãú Ï†ïÎ¶¨
    k.onSceneLeave(() => {
        console.log("üßπ Credits Ïî¨ Ï†ïÎ¶¨");
        clearTimeout(autoReturnTimer);
        cleanup();
        // ÌÇ§ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†úÍ±∞
        if (documentKeyHandler) {
            document.removeEventListener('keydown', documentKeyHandler);
        }
    });
}
