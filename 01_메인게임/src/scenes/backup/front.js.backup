import { healthBar } from "../uiComponents/healthbar.js";
import {
    generatePlayerComponents,
    generateFrontPlayerComponents,
    setPlayerControls,
    watchPlayerHealth,
} from "../entities/player.js";
import { generateNoteComponents } from "../entities/note.js";
import { gameState } from "../state/stateManagers.js";
import { fadeInBGM } from "../utils.js";

import {
    colorizeBackground,
    fetchMapData,
    drawBoundaries,
    onAttacked,
    onCollideWithPlayer,
} from "../utils.js";


import dialogues from "../content/Dialogue.js";
import objectDialogues from "../content/objectDialogue.js";

import {
    toggleLocale,
    toggleMute,
    setupMainMenuShortcut,
    initializeQuestBubbles,
    updateQuestBubbles,
    SPEECH_BUBBLE_STATES,
} from "../utils.js";

// 추가된 부분: 충돌 시 포물선 킥 함수
function kickBallOnCollision(k, ball, player) {
    const currentTime = Date.now();
    const KICK_COOLDOWN = 1000; // 1초 쿨다운

    // 쿨다운 체크
    if (currentTime - ball.lastKickTime < KICK_COOLDOWN) {
        return;
    }

    ball.lastKickTime = currentTime;

    // 플레이어와 공의 위치 차이로 킥 방향 계산
    const kickDirection = ball.pos.sub(player.pos).unit();
    const kickDistance = 100;
    const kickHeight = 20;

    // 목표 위치 계산
    const targetPos = ball.pos.add(kickDirection.scale(kickDistance));

    // 킥 효과음 재생
    k.play("boop-sfx");
    k.play("kick-sfx");

    // 기쁨의 말풍선 표시
    k.wait(0.7, () => {
        showJoyBubble(k, player);
    });

    // 포물선 애니메이션
    const startPos = ball.pos.clone();
    const duration = 0.8;
    let animTime = 0;

    ball.isMoving = true;

    if (ball.body) {
        ball.body.vel = k.vec2(0, 0);
    }

    const animateParabola = () => {
        animTime += k.dt();
        const progress = Math.min(animTime / duration, 1);

        if (progress >= 1) {
            ball.pos = targetPos;
            ball.isMoving = false;

            if (ball.body) {
                ball.body.vel = k.vec2(0, 0);
            }

            console.log("🎾 공이 포물선을 그리며 날아갔습니다!");
            return;
        }

        const x = k.lerp(startPos.x, targetPos.x, progress);
        const baseY = k.lerp(startPos.y, targetPos.y, progress);
        const parabolaOffset = kickHeight * Math.sin(progress * Math.PI);
        const y = baseY - parabolaOffset;

        ball.pos = k.vec2(x, y);

        k.wait(0, animateParabola);
    };

    animateParabola();

    console.log("🦵 플레이어가 공에 충돌하여 포물선 킥!");
}

// 추가된 부분: 플레이어 위에 기쁨의 말풍선을 띄우는 함수
function showJoyBubble(k, player) {
    if (player.joyBubble && player.joyBubble.exists()) {
        player.joyBubble.destroy();
    }

    const BUBBLE_OFFSET_X = 5; 
    const BUBBLE_OFFSET_Y = -14;

    const joyBubble = k.add([
        k.sprite("tiny-speech-indicators", {
            frame: SPEECH_BUBBLE_STATES.VERY_HAPPY,
        }),
        k.pos(player.pos.x + BUBBLE_OFFSET_X, player.pos.y + BUBBLE_OFFSET_Y),
        k.scale(1.176), // 1.68의 70%: 1.68 * 0.7 = 1.176
        k.z(20),
        k.opacity(1.0),
        "joy-bubble",
    ]);

    let time = 0;

    joyBubble.onUpdate(() => {
        time += k.dt();

        if (player.exists()) {
            joyBubble.pos.x = player.pos.x + BUBBLE_OFFSET_X;
            if (time < 0.1) {
                joyBubble.pos.y = player.pos.y + BUBBLE_OFFSET_Y;
            } else {
                joyBubble.pos.y =
                    player.pos.y +
                    BUBBLE_OFFSET_Y +
                    Math.sin((time - 0.1) * 4) * 3;
            }
        }
    });

    player.joyBubble = joyBubble;

    k.wait(2, () => {
        if (joyBubble.exists()) {
            k.tween(
                joyBubble.opacity,
                0,
                0.5,
                (val) => {
                    joyBubble.opacity = val;
                },
                k.easings.easeOutQuad
            ).then(() => {
                if (joyBubble.exists()) {
                    joyBubble.destroy();
                }
            });
        }
    });
}

// 퀘스트 UI 시스템
function setupQuestUI(k, gameState) {
    // 퀘스트 상태 관리
    const questState = {
        hasNewQuests: true, // 새로운 퀘스트가 있는지 여부
        isPopupOpen: false,
    };

    // 퀘스트 아이콘 (화면 우측 상단)
    const questIcon = k.add([
        k.sprite("front-assets", {
            frame: questState.hasNewQuests ? 5771 : 5770, // 열린편지 : 닫힌편지
        }),
        k.pos(k.width() - 60, 20), // 화면 우측 상단
        k.scale(2),
        k.z(100),
        k.area(),
        k.fixed(), // 카메라 이동에 고정
        "quest-icon",
    ]);

    // 퀘스트 팝업 배경
    let questPopup = null;
    let questPopupContent = null;
    let closeButton = null;

    // 퀘스트 아이콘 클릭 이벤트
    questIcon.onClick(() => {
        if (questState.isPopupOpen) {
            closeQuestPopup();
        } else {
            openQuestPopup();
        }
    });

    // 퀘스트 팝업 열기
    function openQuestPopup() {
        if (questState.isPopupOpen) return;

        questState.isPopupOpen = true;

        // 팝업 배경
        questPopup = k.add([
            k.rect(k.width() * 0.8, k.height() * 0.7),
            k.pos(k.width() * 0.1, k.height() * 0.15),
            k.color(20, 20, 40),
            k.outline(4, k.Color.WHITE),
            k.z(150),
            k.fixed(),
            "quest-popup",
            "quest-popup-element", // 태그 추가
        ]);

        // 팝업 제목
        const title = k.add([
            k.text("Quest Log", {
                size: 32,
                font: "galmuri",
            }),
            k.pos(k.width() * 0.15, k.height() * 0.2),
            k.color(255, 255, 255),
            k.z(151),
            k.fixed(),
            "quest-popup-element", // 태그 추가
        ]);

        // 팝업 내용 (임시)
        questPopupContent = k.add([
            k.text("• Welcome to the school!\n• Explore the campus\n• Talk to other students\n• Find the main entrance", {
                size: 20,
                font: "galmuri",
                width: k.width() * 0.7,
            }),
            k.pos(k.width() * 0.15, k.height() * 0.3),
            k.color(200, 200, 200),
            k.z(151),
            k.fixed(),
            "quest-popup-element", // 태그 추가
        ]);

        // 닫기 버튼
        closeButton = k.add([
            k.rect(80, 40),
            k.pos(k.width() * 0.8, k.height() * 0.75),
            k.color(60, 60, 80),
            k.outline(2, k.Color.WHITE),
            k.area(),
            k.z(151),
            k.fixed(),
            "close-button",
            "quest-popup-element", // 태그 추가
        ]);

        const closeButtonText = k.add([
            k.text("Close", {
                size: 16,
                font: "galmuri",
            }),
            k.pos(k.width() * 0.82, k.height() * 0.76),
            k.color(255, 255, 255),
            k.z(152),
            k.fixed(),
            "quest-popup-element", // 태그 추가
        ]);

        // 닫기 버튼 클릭 이벤트
        closeButton.onClick(() => {
            closeQuestPopup();
        });

        // 퀘스트를 확인했으므로 아이콘을 닫힌편지로 변경
        if (questState.hasNewQuests) {
            questState.hasNewQuests = false;
            questIcon.frame = 5770; // 닫힌편지
        }
    }

    // 퀘스트 팝업 닫기
    function closeQuestPopup() {
        if (!questState.isPopupOpen) return;

        questState.isPopupOpen = false;

        // 퀘스트 팝업 관련 모든 요소 제거
        k.get("quest-popup-element").forEach(obj => {
            if (obj.exists()) {
                obj.destroy();
            }
        });
        
        // 추가 안전장치: 각 변수들 직접 제거
        if (questPopup && questPopup.exists()) {
            questPopup.destroy();
            questPopup = null;
        }
        
        if (questPopupContent && questPopupContent.exists()) {
            questPopupContent.destroy();
            questPopupContent = null;
        }
        
        if (closeButton && closeButton.exists()) {
            closeButton.destroy();
            closeButton = null;
        }
    }

    // ESC 키로 팝업 닫기
    k.onKeyPress("escape", () => {
        if (questState.isPopupOpen) {
            closeQuestPopup();
        }
    });

    // 화면 크기 변경 시 아이콘 위치 업데이트
    k.onResize(() => {
        questIcon.pos = k.vec2(k.width() - 60, 20);
    });

    // 새로운 퀘스트 추가 함수 (나중에 사용할 수 있도록)
    return {
        addNewQuest: () => {
            questState.hasNewQuests = true;
            questIcon.frame = 5771; // 열린편지
        },
        markQuestsAsRead: () => {
            questState.hasNewQuests = false;
            questIcon.frame = 5770; // 닫힌편지
        }
    };
}

export default async function front(k) {
    console.log("🌟 Front 씬 시작");
    fadeInBGM(k, "rpg-front-bgm");

    const previousScene = gameState.getPreviousScene();

    // 언어를 한국어로 설정
    gameState.setLocale("korean");

    colorizeBackground(k, 173, 216, 230); // 연한 파란색 배경 (하늘색)
    
    const entities = {
        player: null,
        cars: [],
        objects: [],
    };
    
    let map;
    
    try {
        const mapData = await fetchMapData("./assets/images/front.json");
        console.log("🗺️ Front 맵 데이터 로드 완료:", mapData);
        map = k.add([k.pos(0, 0)]);

        const layers = mapData.layers;
        console.log("🗺️ 레이어 정보:", layers.map(l => ({ name: l.name, type: l.type, objects: l.objects?.length || 'N/A' })));
        
    for (const layer of layers) {
        if (layer.name === "boundaries") {
            console.log("🚧 Boundaries 레이어 발견:", layer);
            console.log("🚧 Layer offset:", layer.offsetx, layer.offsety);
            // boundaries 레이어에서 특별한 오브젝트들 처리
            for (const object of layer.objects) {
                console.log(`🎯 발견된 boundary 오브젝트: ${object.name} at (${object.x}, ${object.y}) size: ${object.width}x${object.height}`);
                if (
                    [
                        "car1",
                        "car2", // car2 추가
                        "car3", 
                        "car4",
                        "pot", // pot1, pot2를 pot으로 통합
                        "guryeong",
                        "sink",
                        "goal_post1",
                        "goal_post2",
                        "line_machine",
                        "badminton",
                        "main_entrance",
                        "front_gate", // front_gate 추가
                        "ball", // ball 추가
                        "cat1", // cat1 추가
                        "cat2", // cat2 추가
                        "nca", // nca 추가
                        "badminton", // badminton 추가
                    ].includes(object.name)
                ) {
                    const objectType = object.name;

                    // Tiled 좌표계에 맞춰 위치 조정 (24x24 타일 크기 고려, offsety 적용)
                    const objectEntity = map.add([
                        k.rect(object.width, object.height),
                        k.area(),
                        k.body({ isStatic: true }),
                        k.pos(object.x + (layer.offsetx || 0), object.y + (layer.offsety || 0) - 12), // Y 위치를 12픽셀 위로 조정
                        k.opacity(0), // 투명하게 설정
                        objectType,
                        "interactive-object",
                        { objectType },
                    ]);

                    // main_entrance의 경우 schoolfront로 이동
                    objectEntity.onCollideUpdate("player", (player) => {
                        if (objectType === "main_entrance") {
                            console.log("🚪 메인 입구 감지됨!");
                            k.play("boop-sfx");
                            k.go("schoolfront");
                            return;
                        }

                        if (objectType === "front_gate") {
                            console.log("🚪 정문 감지됨!");
                            const locale = gameState.getLocale();
                            const content = objectDialogues[locale]?.["front_gate"] || [
                                "This is the school's front gate. You can leave the school from here.",
                                "학교 정문입니다. 여기서 학교를 나갈 수 있습니다.",
                            ];

                            const speakerName =
                                objectDialogues.names[locale]?.["front_gate"] ||
                                "Front Gate";

                            gameState.setInteractableObject(
                                objectEntity,
                                "object",
                                {
                                    content: content,
                                    speakerName: speakerName,
                                    speakerImage: null,
                                }
                            );
                            return;
                        }

                        // ball (피구공) 처리 - 물리적으로 차일 수 있는 오브젝트
                        if (objectType === "ball") {
                            console.log("⚽ 피구공 감지됨!");
                            
                            // 기존 objectEntity 제거
                            objectEntity.destroy();
                            
                            // 새로운 ball 엔티티 생성
                            const ball = map.add([
                                k.sprite("front-assets", {
                                    frame: 5296, // main.js에 정의된 ball 스프라이트 인덱스
                                }),
                                k.area({
                                    shape: new k.Rect(k.vec2(0), 24, 24),
                                }),
                                k.body({
                                    isStatic: true,
                                    mass: 1,
                                    restitution: 0.6,
                                }),
                                k.pos(object.x + (layer.offsetx || 0), object.y + (layer.offsety || 0) - 12), // Y 위치를 12픽셀 위로 조정
                                k.z(1),
                                "ball",
                                "kickable",
                                {
                                    objectType: "ball",
                                    lastKickTime: 0,
                                    isMoving: false,
                                },
                            ]);

                            ball.onCollideUpdate("player", (player) => {
                                if (!ball.isMoving) {
                                    kickBallOnCollision(k, ball, player);
                                }
                            });
                            
                            console.log("⚽ 피구공 스프라이트 생성됨 at:", ball.pos);
                            return;
                        }

                        // cat1, cat2 처리
                        if (objectType === "cat1" || objectType === "cat2") {
                            console.log(`🐱 ${objectType} 감지됨!`);
                            
                            // 기존 objectEntity 제거
                            objectEntity.destroy();
                            
                            // 새로운 cat 엔티티 생성
                            const cat = map.add([
                                k.sprite("front-assets", {
                                    frame: objectType === "cat1" ? 3784 : 3783, // main.js에 정의된 cat 스프라이트 인덱스
                                }),
                                k.area(),
                                k.body({ isStatic: true }),
                                k.pos(object.x + (layer.offsetx || 0), object.y + (layer.offsety || 0) - 12), // Y 위치를 12픽셀 위로 조정
                                k.z(1),
                                objectType,
                                "interactive-object",
                                { objectType },
                            ]);

                            cat.onCollideUpdate("player", (player) => {
                                const locale = gameState.getLocale();
                                const content = dialogues[locale]?.[objectType] || [
                                    "Meow~",
                                    "야옹~",
                                ];

                                const speakerName =
                                    dialogues.names[locale]?.[objectType] ||
                                    (objectType === "cat1" ? "Cat" : "Another Cat");

                                gameState.setInteractableObject(
                                    cat,
                                    "npc",
                                    {
                                        content: content,
                                        speakerName: speakerName,
                                        speakerImage: null,
                                    }
                                );
                            });

                            cat.onCollideEnd("player", () => {
                                gameState.clearInteractableObject();
                            });
                            
                            console.log(`� ${objectType} 스프라이트 생성됨 at:`, cat.pos);
                            return;
                        }

                        // nca 처리
                        if (objectType === "nca") {
                            console.log("📄 NCA 전단지 감지됨!");
                            
                            // 기존 objectEntity 제거
                            objectEntity.destroy();
                            
                            // 새로운 nca 엔티티 생성
                            const nca = map.add([
                                k.sprite("front-assets", {
                                    frame: 5298, // main.js에 정의된 nca 스프라이트 인덱스
                                }),
                                k.area(),
                                k.body({ isStatic: true }),
                                k.pos(object.x + (layer.offsetx || 0), object.y + (layer.offsety || 0) - 12), // Y 위치를 12픽셀 위로 조정
                                k.z(1),
                                objectType,
                                "interactive-object",
                                { objectType },
                            ]);

                            nca.onCollideUpdate("player", (player) => {
                                const locale = gameState.getLocale();
                                const content = objectDialogues[locale]?.[objectType] || [
                                    "NCA recruitment flyer.",
                                    "NCA 모집 전단지입니다.",
                                ];

                                const speakerName =
                                    objectDialogues.names[locale]?.[objectType] ||
                                    "NCA Flyer";

                                gameState.setInteractableObject(
                                    nca,
                                    "object",
                                    {
                                        content: content,
                                        speakerName: speakerName,
                                        speakerImage: null,
                                    }
                                );
                            });

                            nca.onCollideEnd("player", () => {
                                gameState.clearInteractableObject();
                            });
                            
                            console.log("� NCA 스프라이트 생성됨 at:", nca.pos);
                            return;
                        }

                        // 상호작용 가능한 객체로 설정
                        const locale = gameState.getLocale();
                        const content = objectDialogues[locale]?.[
                            objectType
                        ] || [
                            `This is ${objectType}`,
                            `이것은 ${objectType}입니다`,
                        ];

                        const speakerName =
                            objectDialogues.names[locale]?.[objectType] ||
                            objectType;

                        gameState.setInteractableObject(
                            objectEntity,
                            "object",
                            {
                                content: content,
                                speakerName: speakerName,
                                speakerImage: null,
                            }
                        );
                    });

                    objectEntity.onCollideEnd("player", (player) => {
                        if (objectType !== "main_entrance" && objectType !== "front_gate") {
                            gameState.clearInteractableObject();
                        }
                    });

                    if (objectType.startsWith("car")) {
                        entities.cars.push(objectEntity);
                    } else {
                        entities.objects.push(objectEntity);
                    }
                }
            }

            // drawBoundaries 대신 front.json에 맞는 커스텀 boundary 처리
            for (const object of layer.objects) {
                // 이미 처리한 특별한 오브젝트들은 제외
                if ([
                    "car1", "car2", "car3", "car4", 
                    "pot", "guryeong", "sink",
                    "goal_post1", "goal_post2", "line_machine", 
                    "badminton", "main_entrance", "front_gate",
                    "ball", "cat1", "cat2", "nca", "badminton"
                ].includes(object.name)) {
                    continue;
                }

                // 일반 경계선 처리 (이름이 없는 벽들)
                const tag = object.name !== "" ? object.name : object.type || "wall";
                
                console.log(`🧱 일반 경계선 생성: ${tag} at (${object.x}, ${object.y}) size: ${object.width}x${object.height}`);
                
                const collider = map.add([
                    k.rect(object.width, object.height),
                    k.pos(object.x + (layer.offsetx || 0), object.y + (layer.offsety || 0)), // front.json에 맞는 offset 적용
                    k.area(),
                    k.body({ isStatic: true }),
                    k.opacity(0), // 투명하게 설정
                    tag,
                ]);
            }
            continue;
        }

        if (layer.name === "cha") {
            console.log("👥 캐릭터(cha) 레이어 발견:", layer);
            if (layer.objects && layer.objects.length > 0) {
                console.log("� 캐릭터 오브젝트들:", layer.objects);
                for (const object of layer.objects) {
                    console.log(`👤 발견된 캐릭터: ${object.name} at (${object.x}, ${object.y})`);
                    
                    // director 처리
                    if (object.name === "director") {
                        console.log("👨‍🏫 학년부장 선생님 감지됨! (cha 레이어)");
                        const locale = gameState.getLocale();
                        const content = dialogues[locale]?.["director"] || [
                            "Hello, I'm the grade director.",
                            "안녕하세요, 학년부장입니다.",
                        ];

                        const speakerName =
                            dialogues.names[locale]?.["director"] ||
                            "Grade Director";

                        const directorEntity = map.add([
                            k.sprite("front-assets", {
                                anim: "director",
                            }),
                            k.area(),
                            k.body({ isStatic: true }),
                            k.pos(object.x, object.y),
                            k.z(0.5), // 플레이어(z=1)보다 뒤에 배치
                            "director",
                            "interactive-object",
                            { objectType: "director" },
                        ]);

                        directorEntity.onCollideUpdate("player", (player) => {
                            gameState.setInteractableObject(
                                directorEntity,
                                "npc",
                                {
                                    content: content,
                                    speakerName: speakerName,
                                    speakerImage: null,
                                }
                            );
                        });

                        directorEntity.onCollideEnd("player", () => {
                            gameState.clearInteractableObject();
                        });

                        entities.objects.push(directorEntity);
                        continue;
                    }

                    // facil 처리
                    if (object.name === "facil") {
                        console.log("👨‍💼 교감 선생님 감지됨! (cha 레이어)");
                        const locale = gameState.getLocale();
                        const content = dialogues[locale]?.["facil"] || [
                            "Hello! I'm the vice principal.",
                            "안녕하세요! 저는 교감입니다.",
                        ];

                        const speakerName =
                            dialogues.names[locale]?.["facil"] ||
                            "Vice Principal";

                        const facilEntity = map.add([
                            k.sprite("front-assets", {
                                anim: "facil",
                            }),
                            k.area(),
                            k.body({ isStatic: true }),
                            k.pos(object.x, object.y),
                            k.z(0.5), // 플레이어(z=1)보다 뒤에 배치
                            "facil",
                            "interactive-object",
                            { objectType: "facil" },
                        ]);

                        facilEntity.onCollideUpdate("player", (player) => {
                            gameState.setInteractableObject(
                                facilEntity,
                                "npc",
                                {
                                    content: content,
                                    speakerName: speakerName,
                                    speakerImage: null,
                                }
                            );
                        });

                        facilEntity.onCollideEnd("player", () => {
                            gameState.clearInteractableObject();
                        });

                        entities.objects.push(facilEntity);
                        continue;
                    }
                }
            } else {
                console.log("⚠️ cha 레이어는 있지만 오브젝트가 없음");
            }
            continue;
        }

        if (layer.name === "spawnpoints") {
            console.log("🎯 Spawnpoints 레이어 발견:", layer);
            // spawnpoints 레이어가 있지만 objects가 있는지 확인
            if (layer.objects && layer.objects.length > 0) {
                console.log("📍 스폰포인트 오브젝트들:", layer.objects);
                for (const object of layer.objects) {
                    console.log(`🎲 발견된 오브젝트: ${object.name} at (${object.x}, ${object.y})`);
                    
                    // front 씬에서는 기본 player 스폰포인트만 사용
                    if (object.name === "player") {
                        console.log("🎮 플레이어 스폰포인트 발견:", object);
                        entities.player = map.add(
                            generateFrontPlayerComponents(k, k.vec2(object.x, object.y))
                        );
                        continue;
                    }

                    // schoolfront에서 돌아온 경우
                    if (
                        object.name === "player2" &&
                        previousScene === "schoolfront"
                    ) {
                        console.log("🚪 학교에서 돌아온 플레이어 스폰포인트 사용:", object);
                        entities.player = map.add(
                            generateFrontPlayerComponents(k, k.vec2(object.x, object.y))
                        );
                        continue;
                    }

                    // NPC들 처리 - director와 facil은 이제 spawnpoints에서 처리
                    // if (object.name === "director") {
                    //     const director = map.add([
                    //         k.sprite("front-assets", {
                    //             anim: "director",
                    //         }),
                    //         k.area(),
                    //         k.body({ isStatic: true }),
                    //         k.pos(object.x, object.y),
                    //         k.z(1),
                    //         "director",
                    //         { npcType: "director" },
                    //     ]);

                    //     director.onCollideUpdate("player", (player) => {
                    //         const locale = gameState.getLocale();
                    //         const content = npcDialogues[locale]?.["director"] || [
                    //             "Hello! I'm the director of this school.",
                    //             "안녕하세요! 저는 이 학교의 교장입니다.",
                    //         ];

                    //         const speakerName =
                    //             npcDialogues.names[locale]?.["director"] ||
                    //             "Director";

                    //         gameState.setInteractableObject(director, "npc", {
                    //             content: content,
                    //             speakerName: speakerName,
                    //             speakerImage: null,
                    //         });
                    //     });

                    //     director.onCollideEnd("player", (player) => {
                    //         gameState.clearInteractableObject();
                    //     });
                    //     continue;
                    // }

                    // cat1, cat2 처리 (spawnpoints 레이어에서)
                    if (object.name === "cat1" || object.name === "cat2") {
                        console.log(`🐱 ${object.name} 감지됨! (spawnpoints 레이어)`);
                        
                        const objectType = object.name;
                        const cat = map.add([
                            k.sprite("front-assets", {
                                frame: objectType === "cat1" ? 3784 : 3783, // main.js에 정의된 cat 스프라이트 인덱스
                            }),
                            k.area(),
                            k.body({ isStatic: true }),
                            k.pos(object.x, object.y),
                            k.z(1),
                            objectType,
                            "interactive-object",
                            { objectType },
                        ]);

                        cat.onCollideUpdate("player", (player) => {
                            const locale = gameState.getLocale();
                            const content = dialogues[locale]?.[objectType] || [
                                "Meow~",
                                "야옹~",
                            ];

                            const speakerName =
                                dialogues.names[locale]?.[objectType] ||
                                (objectType === "cat1" ? "Cat" : "Another Cat");

                            gameState.setInteractableObject(
                                cat,
                                "npc",
                                {
                                    content: content,
                                    speakerName: speakerName,
                                    speakerImage: null,
                                }
                            );
                        });

                        cat.onCollideEnd("player", () => {
                            gameState.clearInteractableObject();
                        });
                        
                        console.log(`� ${objectType} 스프라이트 생성됨 at:`, cat.pos);
                        continue;
                    }

                    // ball 처리 (spawnpoints 레이어에서)
                    if (object.name === "ball") {
                        console.log("⚽ 피구공 감지됨! (spawnpoints 레이어)");
                        
                        const ball = map.add([
                            k.sprite("front-assets", {
                                frame: 5296, // main.js에 정의된 ball 스프라이트 인덱스
                            }),
                            k.area({
                                shape: new k.Rect(k.vec2(0), 24, 24),
                            }),
                            k.body({
                                isStatic: true,
                                mass: 1,
                                restitution: 0.6,
                            }),
                            k.pos(object.x, object.y),
                            k.z(1),
                            "ball",
                            "kickable",
                            {
                                objectType: "ball",
                                lastKickTime: 0,
                                isMoving: false,
                            },
                        ]);

                        ball.onCollideUpdate("player", (player) => {
                            if (!ball.isMoving) {
                                kickBallOnCollision(k, ball, player);
                            }
                        });
                        
                        console.log("⚽ 피구공 스프라이트 생성됨 at:", ball.pos);
                        continue;
                    }

                    // nca 처리 (spawnpoints 레이어에서)
                    if (object.name === "nca") {
                        console.log("📄 NCA 전단지 감지됨! (spawnpoints 레이어)");
                        
                        const nca = map.add([
                            k.sprite("front-assets", {
                                frame: 5298, // main.js에 정의된 nca 스프라이트 인덱스
                            }),
                            k.area(),
                            k.body({ isStatic: true }),
                            k.pos(object.x, object.y),
                            k.z(1),
                            "nca",
                            "interactive-object",
                            { objectType: "nca" },
                        ]);

                        nca.onCollideUpdate("player", (player) => {
                            const locale = gameState.getLocale();
                            const content = objectDialogues[locale]?.["nca"] || [
                                "NCA recruitment flyer.",
                                "NCA 모집 전단지입니다.",
                            ];

                            const speakerName =
                                objectDialogues.names[locale]?.["nca"] ||
                                "NCA Flyer";

                            gameState.setInteractableObject(
                                nca,
                                "object",
                                {
                                    content: content,
                                    speakerName: speakerName,
                                    speakerImage: null,
                                }
                            );
                        });

                        nca.onCollideEnd("player", () => {
                            gameState.clearInteractableObject();
                        });
                        
                        console.log("� NCA 스프라이트 생성됨 at:", nca.pos);
                        continue;
                    }

                    // 편지 오브젝트 처리
                    if (object.name.startsWith("letter")) {
                        const letterType = object.name;
                        const letter = map.add([
                            k.sprite("front-assets", {
                                anim: letterType,
                            }),
                            k.area(),
                            k.body({ isStatic: true }),
                            k.pos(object.x, object.y),
                            k.z(1),
                            "letter",
                            { letterType },
                        ]);

                        letter.onCollideUpdate("player", (player) => {
                            const locale = gameState.getLocale();
                            const content = objectDialogues[locale]?.[
                                letterType
                            ] || [
                                `This is ${letterType}`,
                                `이것은 ${letterType}입니다`,
                            ];

                            const speakerName =
                                objectDialogues.names[locale]?.[letterType] ||
                                letterType;

                            gameState.setInteractableObject(letter, "letter", {
                                content: content,
                                speakerName: speakerName,
                                speakerImage: null,
                            });
                        });

                        letter.onCollideEnd("player", (player) => {
                            gameState.clearInteractableObject();
                        });
                        continue;
                    }

                    // Student NPC 처리
                    if (object.name.startsWith("student")) {
                        const studentType = object.name;
                        const student = map.add([
                            k.sprite("front-assets", {
                                anim: studentType,
                            }),
                            k.area({
                                shape: new k.Rect(k.vec2(0, -10), 16, 24), // Y 오프셋 -8로 콜라이더를 위로 이동
                            }),
                            k.body({ isStatic: true }),
                            k.pos(object.x, object.y),
                            k.z(1),
                            "student",
                            { studentType },
                        ]);

                        student.onCollideUpdate("player", (player) => {
                            const locale = gameState.getLocale();
                            const content = dialogues[locale]?.[studentType] || [
                                `Hello! I'm ${studentType}.`,
                                `안녕하세요! 저는 ${studentType}입니다.`,
                            ];

                            const speakerName =
                                dialogues.names[locale]?.[studentType] ||
                                studentType;

                            gameState.setInteractableObject(student, "student", {
                                content: content,
                                speakerName: speakerName,
                                speakerImage: null,
                            });
                        });

                        student.onCollideEnd("player", (player) => {
                            gameState.clearInteractableObject();
                        });
                        continue;
                    }
                }
            } else {
                console.log("⚠️ Spawnpoints 레이어는 있지만 오브젝트가 없음");
            }
            continue;
        }

        // Handle regular tile layers with chunks system (infinite maps)
        if (layer.chunks) {
            console.log(`🧩 Processing chunks for layer: ${layer.name}`, layer.chunks.length);
            // Infinite 맵의 chunks 처리
            for (const chunk of layer.chunks) {
                console.log(`📦 Processing chunk at (${chunk.x}, ${chunk.y}) size: ${chunk.width}x${chunk.height}`);
                let tileIndex = 0;
                for (let y = 0; y < chunk.height; y++) {
                    for (let x = 0; x < chunk.width; x++) {
                        const tile = chunk.data[tileIndex];
                        tileIndex++;

                        if (tile === 0) continue;

                        // chunk의 절대 위치 계산
                        const tileX = (chunk.x + x) * mapData.tilewidth;
                        const tileY = (chunk.y + y) * mapData.tileheight;

                        // upmost 레이어는 캐릭터보다 위에 배치 (z=3), 다른 타일은 기본 (z=0)
                        const zIndex = layer.name === "upmost" ? 3 : 0;

                        // front.json은 rpg_spritesheet_front.png를 사용하므로 front-assets 스프라이트 사용
                        map.add([
                            k.sprite("front-assets", { frame: tile - 1 }),
                            k.pos(tileX, tileY),
                            k.z(zIndex),
                            k.offscreen(),
                        ]);
                    }
                }
            }
            continue;
        }

        // Handle regular tile layers (non-infinite maps)
        if (layer.data) {
            let nbOfDrawnTiles = 0;
            const tilePos = k.vec2(0, 0);
            for (const tile of layer.data) {
                if (nbOfDrawnTiles % layer.width === 0) {
                    tilePos.x = 0;
                    tilePos.y += mapData.tileheight;
                } else {
                    tilePos.x += mapData.tilewidth;
                }

                nbOfDrawnTiles++;

                if (tile === 0) continue;

                // upmost 레이어는 캐릭터보다 위에 배치 (z=3), 다른 타일은 기본 (z=0)
                const zIndex = layer.name === "upmost" ? 3 : 0;

                // front.json은 rpg_spritesheet_front.png를 사용하므로 front-assets 스프라이트 사용
                map.add([
                    k.sprite("front-assets", { frame: tile - 1 }),
                    k.pos(tilePos),
                    k.z(zIndex),
                    k.offscreen(),
                ]);
            }
            continue;
        }
    }

    // 모든 레이어 처리 후 플레이어가 생성되지 않았다면 기본 위치에 생성
    if (!entities.player) {
        console.log("🎮 플레이어가 생성되지 않음, 기본 위치에 생성");
        entities.player = map.add(
            generateFrontPlayerComponents(k, k.vec2(0, 0))
        );
    } else {
        console.log("🎮 플레이어 생성 완료:", entities.player.pos);
    }

    setPlayerControls(k, entities.player);

    // 플레이어 존재 확인 후 이벤트 리스너 설정
    if (entities.player && entities.player.exists()) {
        // front 씬에서는 main_entrance를 통해 schoolfront로 이동
        entities.player.onCollide("main_entrance", () => k.go("schoolfront"));
    }

    k.camScale(2); // 줌아웃: 3 → 1.5로 변경

    // 플레이어 존재 확인 후 카메라 설정
    if (entities.player && entities.player.exists()) {
        k.camPos(entities.player.worldPos());
    }

    k.onUpdate(async () => {
        // 플레이어 존재 확인 후 카메라 업데이트 (흔들림 방지를 위해 부드럽게 조정)
        if (
            entities.player &&
            entities.player.exists() &&
            entities.player.pos.dist(k.camPos()) > 10 // 거리 임계값 증가
        ) {
            // 트윈 대신 lerp를 사용하여 더 부드러운 카메라 이동
            const targetPos = entities.player.worldPos();
            const currentPos = k.camPos();
            const lerpFactor = 0.05; // 더 부드러운 이동을 위해 값 감소
            
            const newPos = k.vec2(
                k.lerp(currentPos.x, targetPos.x, lerpFactor),
                k.lerp(currentPos.y, targetPos.y, lerpFactor)
            );
            
            k.camPos(newPos);
        }
    });

    // UI 요소들 숨김 - front 씬에서는 UI 없음
    // healthBar(k);
    // watchPlayerHealth(k);

    let isLocaleLocked = { value: false };
    let isMuteLocked = { value: false };

    // 키보드 단축키
    k.onKeyPress("l", () => {
        toggleLocale(k, gameState, isLocaleLocked);
    });

    k.onKeyPress("ㅣ", () => {
        toggleLocale(k, gameState, isLocaleLocked);
    });

    k.onKeyPress("m", () => {
        toggleMute(k, gameState, isMuteLocked);
    });

    k.onKeyPress("ㅡ", () => {
        toggleMute(k, gameState, isMuteLocked);
    });

    // 게임패드 컨트롤
    k.onGamepadButtonPress("lshoulder", () => {
        console.log("🎮 L버튼 눌림 - 언어 변경");
        toggleLocale(k, gameState, isLocaleLocked);
    });

    k.onGamepadButtonPress("rshoulder", () => {
        console.log("🎮 R버튼 눌림 - 음소거 토글");
        toggleMute(k, gameState, isMuteLocked);
    });

    k.onGamepadButtonPress("ltrigger", () => {
        console.log("🎮 L2 트리거 눌림 - 언어 변경");
        toggleLocale(k, gameState, isLocaleLocked);
    });

    k.onGamepadButtonPress("rtrigger", () => {
        console.log("🎮 R2 트리거 눌림 - 음소거 토글");
        toggleMute(k, gameState, isMuteLocked);
    });

    // 1번 키로 메인 메뉴 이동
    setupMainMenuShortcut(k, gameState);

    // 퀘스트 UI 추가
    setupQuestUI(k, gameState);
    
    } catch (error) {
        console.error("❌ Front 씬 로드 중 오류:", error);
        // 오류 발생 시 기본 설정으로 진행
        if (!map) {
            map = k.add([k.pos(0, 0)]);
        }
        entities.player = map.add(
            generateFrontPlayerComponents(k, k.vec2(0, 0))
        );
        setPlayerControls(k, entities.player);
        k.camScale(1.5); // 줌아웃: 3 → 1.5로 변경
        k.camPos(entities.player.worldPos());
    }
}
