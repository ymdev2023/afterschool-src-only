import { createUIManager } from "../systems/uiManager.js";
import {
    generatePlayerComponents,
    setPlayerControls,
    watchPlayerHealth,
} from "../entities/player.js";
import { generateNoteComponents } from "../entities/note.js";
import { gameState } from "../state/stateManagers.js";
import { fadeInBGM } from "../utils.js";

import {
    colorizeBackground,
    fetchMapData,
    drawBoundaries,
    onAttacked,
    onCollideWithPlayer,
    setupMainMenuShortcut,
} from "../utils.js";

import noteDialogues from "../content/temp/noteDialogue.js";
import objectDialogues from "../content/objectDialogue.js";
import { dialog } from "../uiComponents/dialog.js";
import { toggleLocale, toggleMute, initializeQuestBubbles, updateQuestBubbles } from "../utils.js";

export default async function schoolfirst(k) {
    console.log("üè´ schoolfirst scene ÏãúÏûë");

    fadeInBGM(k, "rpg-first-bgm"); // ÏàòÏ†ïÎêú Î∂ÄÎ∂Ñ: house-bgm ‚Üí rpg-first-bgm

    const previousScene = gameState.getPreviousScene();

    // Ïñ∏Ïñ¥Î•º ÌïúÍµ≠Ïñ¥Î°ú ÏÑ§Ï†ï
    gameState.setLocale("korean");

    // Î∞∞Í≤ΩÏùÑ Í≤ÄÏùÄÏÉâÏúºÎ°ú ÏÑ§Ï†ï
    colorizeBackground(k, 0, 0, 0);
    const mapData = await fetchMapData("./assets/images/schoolfirst.json");
    const map = k.add([k.pos(0, 0)]);

    const entities = {
        player: null,
        students: [],
        letters: [],
    };
    const layers = mapData.layers;

    // spawnpoint Î†àÏù¥Ïñ¥Î•º Î®ºÏ†Ä Ï≤òÎ¶¨ÌïòÏó¨ ÌîåÎ†àÏù¥Ïñ¥Î•º ÏÉùÏÑ±
    for (const layer of layers) {
        if (layer.name === "spawnpoint") {
            // spawnpoint Î†àÏù¥Ïñ¥Îäî Ïù¥ÎØ∏ ÏúÑÏóêÏÑú Ï≤òÎ¶¨ÌñàÏúºÎØÄÎ°ú Í±¥ÎÑàÎõ∞Í∏∞
            continue;
        }
    }

    // Ïù¥Ï†ú boundaries Î†àÏù¥Ïñ¥ Ï≤òÎ¶¨
    for (const layer of layers) {
        if (layer.name === "boundaries") {
            // boundaries Î†àÏù¥Ïñ¥ÏóêÏÑú ÌäπÎ≥ÑÌïú Ïò§Î∏åÏ†ùÌä∏Îì§ Ï≤òÎ¶¨
            for (const object of layer.objects) {
                if (
                    [
                        "locker",
                        "elevator1",
                        "plant1",
                        "plant2",
                        "plant3",
                        "shelf1",
                        "shelf2",
                        "bulletin1",
                        "door_store",
                        "door_wc1",
                        "stair_to_second",
                        "exit_to_front",
                        "window",
                        "cam", // Ï∂îÍ∞ÄÎêú Î∂ÄÎ∂Ñ
                        "director",
                        "facil",
                    ].includes(object.name)
                ) {
                    const objectType = object.name;

                    // stair_to_secondÎäî ÌäπÎ≥ÑÌûà Ï≤òÎ¶¨ - schoolsecondÎ°ú Ïù¥Îèô
                    if (objectType === "stair_to_second") {
                        const stairToSecondEntity = map.add([
                            k.rect(object.width, object.height),
                            k.area(),
                            k.body({ isStatic: true }),
                            k.pos(object.x, object.y + 16),
                            k.opacity(0),
                            "stair_to_second",
                            "interactive-object",
                            { objectType: "stair_to_second" },
                        ]);

                        stairToSecondEntity.onCollide("player", () => {
                            console.log(
                                "üö™ stair_to_second Ï∂©Îèå - schoolsecondÎ°ú Ïù¥Îèô"
                            );
                            // ÏàòÏ†ïÎêú Î∂ÄÎ∂Ñ: 2Ï∏µ ÏßÑÏûÖ Ïãú Ìö®Í≥ºÏùå Ï∂îÍ∞Ä
                            k.play("boop-sfx");
                            gameState.setPreviousScene("schoolfirst");
                            k.go("schoolsecond");
                        });
                        continue;
                    }

                    // exit_to_frontÎäî ÌäπÎ≥ÑÌûà Ï≤òÎ¶¨ - schoolfrontÎ°ú Ïù¥Îèô
                    if (objectType === "exit_to_front") {
                        const exitToFrontEntity = map.add([
                            k.rect(object.width, object.height),
                            k.area(),
                            k.body({ isStatic: true }),
                            k.pos(object.x, object.y + 16),
                            k.opacity(0),
                            "exit_to_front",
                            "interactive-object",
                            { objectType: "exit_to_front" },
                        ]);

                        exitToFrontEntity.onCollide("player", () => {
                            console.log(
                                "üö™ exit_to_front Ï∂©Îèå - schoolfrontÎ°ú Ïù¥Îèô"
                            );
                            // ÏàòÏ†ïÎêú Î∂ÄÎ∂Ñ: 1Ï∏µÏóêÏÑú Ï†ïÎ¨∏ÏúºÎ°ú Ïù¥Îèô Ïãú Ìö®Í≥ºÏùå Ï∂îÍ∞Ä
                            k.play("boop-sfx");
                            gameState.setPreviousScene("schoolfirst");
                            k.go("schoolfront");
                        });
                        continue;
                    }

                    // directorÏôÄ facilÏùò ÌäπÎ≥ÑÌïú Ï≤òÎ¶¨
                    if (objectType === "director" || objectType === "facil") {
                        const adjustedWidth = Math.round(object.width * 1.05); // ÎÑàÎπÑ 5% Ï¶ùÍ∞Ä
                        const adjustedY = object.y + 16 - 10; // yÏ¢åÌëú 10ÎßåÌÅº ÏúÑÎ°ú Ïù¥Îèô
                        
                        const npcEntity = map.add([
                            k.rect(adjustedWidth, object.height),
                            k.area(),
                            k.body({ isStatic: true }),
                            k.pos(object.x, adjustedY),
                            k.opacity(0),
                            objectType,
                            "interactive-object",
                            { objectType },
                        ]);

                        // NPC ÏÉÅÌò∏ÏûëÏö© ÏãúÏä§ÌÖú
                        npcEntity.onCollideUpdate("player", (player) => {
                            const locale = gameState.getLocale();
                            const content = objectDialogues[locale]?.[
                                objectType
                            ] || [
                                `Hello! I'm ${objectType}!`,
                                `ÏïàÎÖïÌïòÏÑ∏Ïöî! Ï†ÄÎäî ${objectType}ÏûÖÎãàÎã§!`,
                            ];

                            const speakerName =
                                objectDialogues.names[locale]?.[objectType] ||
                                objectType;

                            gameState.setInteractableObject(
                                npcEntity,
                                "npc",
                                {
                                    content: content,
                                    speakerName: speakerName,
                                    speakerImage: null,
                                }
                            );
                        });

                        // Ï∂©ÎèåÏóêÏÑú Î≤óÏñ¥ÎÇ† Îïå ÏÉÅÌò∏ÏûëÏö© Í∞ùÏ≤¥ Ï¥àÍ∏∞Ìôî
                        npcEntity.onCollideEnd("player", (player) => {
                            gameState.clearInteractableObject();
                        });
                        continue;
                    }

                    // Tiled Ï¢åÌëúÍ≥ÑÏóê ÎßûÏ∂∞ ÏúÑÏπò Ï°∞Ï†ï (Îã§Î•∏ Ï∂©Îèå Î∞ïÏä§Îì§Í≥º ÏùºÍ¥ÄÏÑ± Ïú†ÏßÄ)
                    const objectEntity = map.add([
                        k.rect(object.width, object.height),
                        k.area(),
                        k.body({ isStatic: true }),
                        k.pos(object.x, object.y + 16), // ÏùºÎ∞ò Ï∂©Îèå Î∞ïÏä§ÏôÄ Í∞ôÏùÄ Ïò§ÌîÑÏÖã Ï†ÅÏö©
                        k.opacity(0),
                        objectType,
                        "interactive-object",
                        { objectType },
                    ]);

                    // ÏàòÏ†ïÎêú Î∂ÄÎ∂Ñ: ÌîåÎ†àÏù¥Ïñ¥ÏôÄÏùò Ï∂©Îèå Í∞êÏßÄ (ÏÉÅÌò∏ÏûëÏö© ÏãúÏä§ÌÖú)
                    objectEntity.onCollideUpdate("player", (player) => {
                        const locale = gameState.getLocale();
                        const content = objectDialogues[locale]?.[
                            objectType
                        ] || [
                            `This is ${objectType}`,
                            `Ïù¥Í≤ÉÏùÄ ${objectType}ÏûÖÎãàÎã§`,
                        ];

                        const speakerName =
                            objectDialogues.names[locale]?.[objectType] ||
                            objectType;

                        gameState.setInteractableObject(
                            objectEntity,
                            "object",
                            {
                                content: content,
                                speakerName: speakerName,
                                speakerImage: null,
                            }
                        );
                    });

                    // Ï∂©ÎèåÏóêÏÑú Î≤óÏñ¥ÎÇ† Îïå ÏÉÅÌò∏ÏûëÏö© Í∞ùÏ≤¥ Ï¥àÍ∏∞Ìôî
                    objectEntity.onCollideEnd("player", (player) => {
                        gameState.clearInteractableObject();
                    });
                }
            }

            const processedObjects = [
                "locker",
                "elevator1",
                "plant1",
                "plant2",
                "plant3",
                "shelf1",
                "shelf2",
                "bulletin1",
                "door_store",
                "door_wc1",
                "stair_to_second",
                "exit_to_front",
                "window",
                "cam", // Ï∂îÍ∞ÄÎêú Î∂ÄÎ∂Ñ
                "director",
                "facil",
            ];

            drawBoundaries(k, map, layer, processedObjects);
            continue;
        }

        if (layer.name === "spawnpoint") {
            // Î®ºÏ†Ä Î™®Îì† Ïä§Ìè∞ Ìè¨Ïù∏Ìä∏Î•º ÏàòÏßë
            const spawnPoints = {};
            for (const object of layer.objects) {
                if (object.name === "player" || object.name === "player2") {
                    spawnPoints[object.name] = { x: object.x, y: object.y };
                }
            }

            // targetSpawn ÌôïÏù∏Ìï¥ÏÑú Ï†ÅÏ†àÌïú ÏúÑÏπòÏóê Ïä§Ìè∞
            const targetSpawn = gameState.getTargetSpawn() || "player";
            const spawnPos = spawnPoints[targetSpawn] || spawnPoints["player"];

            if (spawnPos) {
                entities.player = map.add(
                    generatePlayerComponents(k, k.vec2(spawnPos.x, spawnPos.y))
                );

                // Ïä§Ìè∞ ÌõÑ targetSpawn Ï¥àÍ∏∞Ìôî
                gameState.setTargetSpawn(null);
            }

            for (const object of layer.objects) {
                // ÌîåÎ†àÏù¥Ïñ¥ Ïä§Ìè∞ÏùÄ Ïù¥ÎØ∏ ÏúÑÏóêÏÑú Ï≤òÎ¶¨ÌñàÏúºÎØÄÎ°ú Í±¥ÎÑàÎõ∞Í∏∞
                if (object.name === "player" || object.name === "player2") {
                    continue;
                }

                if (object.name.startsWith("student")) {
                    // student1, student2, student3, student4 Ï≤òÎ¶¨
                    const studentType = object.name; // student1, student2, etc.

                    const student = map.add([
                        k.sprite("main-assets", {
                            anim: studentType, // main.jsÏóê Ï†ïÏùòÎêú Ïï†ÎãàÎ©îÏù¥ÏÖò ÏÇ¨Ïö©
                        }),
                        k.area({
                            shape: new k.Rect(k.vec2(0), 24, 24), // 24x24 ÌîΩÏÖÄ Ï∂©Îèå ÏòÅÏó≠
                        }),
                        k.body({ isStatic: true }),
                        k.pos(object.x, object.y),
                        k.z(1), // ÌîåÎ†àÏù¥Ïñ¥Î≥¥Îã§ ÏïÑÎûò, Î∞∞Í≤ΩÎ≥¥Îã§ ÏúÑÏóê Î∞∞Ïπò
                        "student",
                        { studentType },
                    ]);

                    entities.students.push(student);

                    // Ï∂îÍ∞ÄÎêú Î∂ÄÎ∂Ñ: student1ÏóêÎßå ÎßêÌíçÏÑ† Ï∂îÍ∞Ä (ÏûÑÏãúÎ°ú Ï†úÍ±∞ - ÏóêÎü¨ Ìï¥Í≤∞ ÌõÑ Îã§Ïãú Ï∂îÍ∞Ä ÏòàÏ†ï)
                    // if (studentType === "student1") {
                    //     const bubble = map.add([
                    //         k.sprite("main-assets", { frame: 874 }),
                    //         k.pos(student.pos.x, student.pos.y - 50),
                    //         k.anchor("bottom"),
                    //         k.scale(0.8),
                    //         k.z(20),
                    //         k.opacity(1.0),
                    //         "speech-bubble"
                    //     ]);

                    //     let time = 0;
                    //     bubble.onUpdate(() => {
                    //         time += k.dt();
                    //         bubble.pos.x = student.pos.x;
                    //         bubble.pos.y = student.pos.y - 50 + Math.sin(time * 3) * 3;
                    //     });

                    //     student.speechBubble = bubble;
                    // }

                    // ÏàòÏ†ïÎêú Î∂ÄÎ∂Ñ: ÌïôÏÉù ÏÉÅÌò∏ÏûëÏö© ÏãúÏä§ÌÖú
                    student.onCollideUpdate("player", (player) => {
                        const locale = gameState.getLocale();
                        const content = npcDialogues[locale]?.[studentType] || [
                            `Hello! I'm ${studentType}!`,
                            `ÏïàÎÖïÌïòÏÑ∏Ïöî! Ï†ÄÎäî ${studentType}ÏûÖÎãàÎã§!`,
                        ];

                        const speakerName =
                            npcDialogues.names[locale]?.[studentType] ||
                            studentType;

                        gameState.setInteractableObject(student, "student", {
                            content: content,
                            speakerName: speakerName,
                            speakerImage: null,
                        });
                    });

                    student.onCollideEnd("player", (player) => {
                        gameState.clearInteractableObject();
                    });
                    continue;
                }

                if (object.name.startsWith("letter")) {
                    // letter1, letter2 Ï≤òÎ¶¨
                    const letterType = object.name;
                    const letterId =
                        object.properties?.find((p) => p.name === "letterId")
                            ?.value || letterType;

                    const letter = map.add([
                        k.sprite("main-assets", {
                            anim: letterType, // main.jsÏóê Ï†ïÏùòÎêú Ïï†ÎãàÎ©îÏù¥ÏÖò ÏÇ¨Ïö©
                        }),
                        k.area(),
                        k.body({ isStatic: true }),
                        k.pos(object.x, object.y),
                        k.z(1), // ÌîåÎ†àÏù¥Ïñ¥Î≥¥Îã§ ÏïÑÎûò, Î∞∞Í≤ΩÎ≥¥Îã§ ÏúÑÏóê Î∞∞Ïπò
                        "letter",
                        { letterId, letterType },
                    ]);

                    entities.letters.push(letter);

                    // ÏàòÏ†ïÎêú Î∂ÄÎ∂Ñ: letter ÏÉÅÌò∏ÏûëÏö© ÏãúÏä§ÌÖú
                    letter.onCollideUpdate("player", (player) => {
                        const locale = gameState.getLocale();
                        const content = objectDialogues[locale]?.[
                            letterType
                        ] || [
                            `This is ${letterType}`,
                            `Ïù¥Í≤ÉÏùÄ ${letterType}ÏûÖÎãàÎã§`,
                        ];

                        const speakerName =
                            objectDialogues.names[locale]?.[letterType] ||
                            letterType;

                        gameState.setInteractableObject(letter, "letter", {
                            content: content,
                            speakerName: speakerName,
                            speakerImage: null,
                        });
                    });

                    letter.onCollideEnd("player", (player) => {
                        gameState.clearInteractableObject();
                    });
                    continue;
                }

                // facil Ï≤òÎ¶¨
                if (object.name === "facil") {
                    const facil = map.add([
                        k.sprite("main-assets", {
                            anim: "facil", // main.jsÏóê Ï†ïÏùòÎêú Ïï†ÎãàÎ©îÏù¥ÏÖò ÏÇ¨Ïö©
                        }),
                        k.area(),
                        k.body({ isStatic: true }),
                        k.pos(object.x, object.y),
                        k.z(1), // ÌîåÎ†àÏù¥Ïñ¥Î≥¥Îã§ ÏïÑÎûò, Î∞∞Í≤ΩÎ≥¥Îã§ ÏúÑÏóê Î∞∞Ïπò
                        "facil",
                        { npcType: "facil" },
                    ]);

                    // ÏàòÏ†ïÎêú Î∂ÄÎ∂Ñ: facil ÏÉÅÌò∏ÏûëÏö© ÏãúÏä§ÌÖú
                    facil.onCollideUpdate("player", (player) => {
                        const locale = gameState.getLocale();
                        const content = npcDialogues[locale]?.["facil"] || [
                            "Hello! I'm the vice principal.",
                            "ÏïàÎÖïÌïòÏÑ∏Ïöî! Ï†ÄÎäî ÍµêÍ∞êÏûÖÎãàÎã§.",
                        ];

                        const speakerName =
                            npcDialogues.names[locale]?.["facil"] ||
                            "Vice Principal";

                        gameState.setInteractableObject(facil, "npc", {
                            content: content,
                            speakerName: speakerName,
                            speakerImage: null,
                        });
                    });

                    facil.onCollideEnd("player", (player) => {
                        gameState.clearInteractableObject();
                    });
                    continue;
                }

                // Í∏∞Ï°¥ note Ï≤òÎ¶¨Îäî Ïú†ÏßÄ (Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌï¥)
                if (object.name === "note") {
                    const noteIdProp = object.properties?.find(
                        (p) => p.name === "noteId"
                    )?.value;

                    const note = map.add(
                        generateNoteComponents(
                            k,
                            k.vec2(object.x, object.y),
                            noteIdProp
                        )
                    );

                    // ÏàòÏ†ïÎêú Î∂ÄÎ∂Ñ: note ÏÉÅÌò∏ÏûëÏö© ÏãúÏä§ÌÖú
                    note.onCollideUpdate("player", (player) => {
                        const locale = gameState.getLocale();
                        const content = noteDialogues[locale][note.noteId];

                        gameState.setInteractableObject(note, "note", {
                            content: content,
                            speakerName: null,
                            speakerImage: null,
                        });
                    });

                    note.onCollideEnd("player", (player) => {
                        gameState.clearInteractableObject();
                    });
                }
            }
            continue;
        }

        // Handle regular tile layers with main-assets sprite
        if (layer.data) {
            let nbOfDrawnTiles = 0;
            const tilePos = k.vec2(0, 0);
            for (const tile of layer.data) {
                if (nbOfDrawnTiles % layer.width === 0) {
                    tilePos.x = 0;
                    tilePos.y += mapData.tileheight;
                } else {
                    tilePos.x += mapData.tilewidth;
                }

                nbOfDrawnTiles++;

                if (tile === 0) continue;

                // upmost Î†àÏù¥Ïñ¥Îäî Ï∫êÎ¶≠ÌÑ∞Î≥¥Îã§ ÏúÑÏóê Î∞∞Ïπò (z=3), cha Î†àÏù¥Ïñ¥Îäî Ï∫êÎ¶≠ÌÑ∞ÏôÄ Í∞ôÏùÄ ÎÜíÏù¥ (z=1), Îã§Î•∏ ÌÉÄÏùºÏùÄ Í∏∞Î≥∏ (z=0)
                let zIndex = 0;
                if (layer.name === "upmost") {
                    zIndex = 3;
                } else if (layer.name === "cha") {
                    zIndex = 1;
                }

                // Use main-assets sprite instead of assets
                map.add([
                    k.sprite("main-assets", { frame: tile - 1 }),
                    k.pos(tilePos),
                    k.z(zIndex),
                    k.offscreen(),
                ]);
            }
            continue;
        }
    }

    // ÌîåÎ†àÏù¥Ïñ¥Í∞Ä Ïä§Ìè∞ÎêòÏßÄ ÏïäÏïòÎã§Î©¥ Í∏∞Î≥∏ ÏúÑÏπòÏóê ÏÉùÏÑ±
    if (!entities.player) {
        console.log(
            "‚ö†Ô∏è ÌîåÎ†àÏù¥Ïñ¥ Ïä§Ìè∞ Ìè¨Ïù∏Ìä∏Î•º Ï∞æÏùÑ Ïàò ÏóÜÏñ¥ Í∏∞Î≥∏ ÏúÑÏπòÏóê ÏÉùÏÑ±Ìï©ÎãàÎã§."
        );
        entities.player = map.add(
            generatePlayerComponents(k, k.vec2(400, 400)) // Îßµ Ï§ëÏïô Í∑ºÏ≤òÏóê Ïä§Ìè∞
        );
    }

    setPlayerControls(k, entities.player);

    k.camScale(3);
    k.camPos(entities.player.worldPos());
    k.onUpdate(async () => {
        if (entities.player.pos.dist(k.camPos()) > 3) {
            await k.tween(
                k.camPos(),
                entities.player.worldPos(),
                0.15,
                (newPos) => k.camPos(newPos),
                k.easings.linear
            );
        }
    });

    // StudentÎÇò letterÎäî Ï†ïÏ†ÅÏù¥ÎØÄÎ°ú Î≥ÑÎèÑ AI Ï≤òÎ¶¨ Î∂àÌïÑÏöî
    // ÌïÑÏöîÏãú Ïó¨Í∏∞Ïóê studentÎì§Ïùò Ïï†ÎãàÎ©îÏù¥ÏÖòÏù¥ÎÇò ÏÉÅÌò∏ÏûëÏö© Î°úÏßÅ Ï∂îÍ∞Ä Í∞ÄÎä•

    // Ï∂îÍ∞ÄÎêú Î∂ÄÎ∂Ñ: ÌÄòÏä§Ìä∏ ÎßêÌíçÏÑ† ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî
    initializeQuestBubbles(k, entities.students, map);

    const uiManager = createUIManager(k);
    uiManager.initialize(k);
    
    // Ïù∏Î≤§ÌÜ†Î¶¨ ÏãúÏä§ÌÖú Ï¥àÍ∏∞Ìôî (Ïî¨ÏóêÏÑú Î™ÖÏãúÏ†ÅÏúºÎ°ú ÏÉùÏÑ±)
    if (k.inventoryManager) {
        console.log("üì¶ Ïî¨ÏóêÏÑú Ïù∏Î≤§ÌÜ†Î¶¨ ÏÉùÏÑ± Ï§ë...");
        k.inventoryManager.create();
    }
    
    watchPlayerHealth(k);

    let isLocaleLocked = { value: false };
    let isMuteLocked = { value: false };

    // ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§
    k.onKeyPress("l", () => {
        toggleLocale(k, gameState, isLocaleLocked);
    });

    // ÏàòÏ†ïÎêú Î∂ÄÎ∂Ñ: ÌïúÍ∏Ä ÏûêÌåê '„Ö£' (lÌÇ§)ÎèÑ Ïñ∏Ïñ¥ Î≥ÄÍ≤Ω
    k.onKeyPress("„Ö£", () => {
        toggleLocale(k, gameState, isLocaleLocked);
    });

    k.onKeyPress("m", () => {
        toggleMute(k, gameState, isMuteLocked);
    });

    // ÏàòÏ†ïÎêú Î∂ÄÎ∂Ñ: ÌïúÍ∏Ä ÏûêÌåê '„Ö°' (mÌÇ§)ÎèÑ ÏùåÏÜåÍ±∞ ÌÜ†Í∏Ä
    k.onKeyPress("„Ö°", () => {
        toggleMute(k, gameState, isMuteLocked);
    });

    // Í≤åÏûÑÌå®Îìú Ïª®Ìä∏Î°§ (L/R ÏàÑÎçî Î≤ÑÌäº)
    k.onGamepadButtonPress("lshoulder", () => {
        // LÎ≤ÑÌäº
        console.log("üéÆ LÎ≤ÑÌäº ÎàåÎ¶º - Ïñ∏Ïñ¥ Î≥ÄÍ≤Ω");
        toggleLocale(k, gameState, isLocaleLocked);
    });

    k.onGamepadButtonPress("rshoulder", () => {
        // RÎ≤ÑÌäº
        console.log("üéÆ RÎ≤ÑÌäº ÎàåÎ¶º - ÏùåÏÜåÍ±∞ ÌÜ†Í∏Ä");
        toggleMute(k, gameState, isMuteLocked);
    });

    // Í≤åÏûÑÌå®Îìú Ìä∏Î¶¨Í±∞ Î≤ÑÌäºÎèÑ Ï∂îÍ∞Ä (ÏÑ†ÌÉùÏÇ¨Ìï≠)
    k.onGamepadButtonPress("ltrigger", () => {
        // L2 Ìä∏Î¶¨Í±∞
        console.log("üéÆ L2 Ìä∏Î¶¨Í±∞ ÎàåÎ¶º - Ïñ∏Ïñ¥ Î≥ÄÍ≤Ω");
        toggleLocale(k, gameState, isLocaleLocked);
    });

    k.onGamepadButtonPress("rtrigger", () => {
        // R2 Ìä∏Î¶¨Í±∞
        console.log("üéÆ R2 Ìä∏Î¶¨Í±∞ ÎàåÎ¶º - ÏùåÏÜåÍ±∞ ÌÜ†Í∏Ä");
        toggleMute(k, gameState, isMuteLocked);
    });

    // 1Î≤à ÌÇ§Î°ú Î©îÏù∏ Î©îÎâ¥ Ïù¥Îèô
    setupMainMenuShortcut(k, gameState);
}
